apiVersion: v1
kind: ConfigMap
metadata:
  name: execution-station-template
  namespace: execution-stations
  labels:
    app.kubernetes.io/name: execution-stations
    app.kubernetes.io/component: template
data:
  deployment.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: execution-station-${USER_ID}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
        app.kubernetes.io/component: execution-station
        app.kubernetes.io/part-of: personal-execution-stations
        user-id: ${USER_ID}
        cognitive-profile: ${COGNITIVE_PROFILE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/name: execution-station
          app.kubernetes.io/instance: ${USER_ID}
      template:
        metadata:
          labels:
            app.kubernetes.io/name: execution-station
            app.kubernetes.io/instance: ${USER_ID}
            app.kubernetes.io/component: execution-station
            user-id: ${USER_ID}
            cognitive-profile: ${COGNITIVE_PROFILE}
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "8080"
            prometheus.io/path: "/metrics"
        spec:
          serviceAccountName: execution-stations-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: execution-station
            image: ${STATION_IMAGE}:${STATION_VERSION}
            imagePullPolicy: Always
            ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: ssh
              containerPort: 2222
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
            env:
            - name: USER_ID
              value: ${USER_ID}
            - name: COGNITIVE_PROFILE
              value: ${COGNITIVE_PROFILE}
            - name: PREDICTED_CPU
              value: ${PREDICTED_CPU}
            - name: PREDICTED_MEMORY
              value: ${PREDICTED_MEMORY}
            - name: REQUIRES_GPU
              value: ${REQUIRES_GPU}
            - name: WORKSPACE_ROOT
              value: /workspace
            - name: NOVA_ENDPOINT
              valueFrom:
                configMapKeyRef:
                  name: nova-config
                  key: endpoint
            - name: API_KEY
              valueFrom:
                secretKeyRef:
                  name: station-secrets-${USER_ID}
                  key: api_key
            resources:
              requests:
                cpu: ${CPU_REQUEST}
                memory: ${MEMORY_REQUEST}
                ${GPU_REQUEST}
              limits:
                cpu: ${CPU_LIMIT}
                memory: ${MEMORY_LIMIT}
                ${GPU_LIMIT}
            livenessProbe:
              httpGet:
                path: /health
                port: http
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 10
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /ready
                port: http
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            startupProbe:
              httpGet:
                path: /startup
                port: http
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 30
            volumeMounts:
            - name: workspace
              mountPath: /workspace
            - name: user-config
              mountPath: /config
              readOnly: true
            - name: tmp
              mountPath: /tmp
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 1000
              runAsGroup: 1000
              capabilities:
                drop:
                - ALL
          volumes:
          - name: workspace
            persistentVolumeClaim:
              claimName: workspace-${USER_ID}
          - name: user-config
            configMap:
              name: user-config-${USER_ID}
          - name: tmp
            emptyDir: {}
          tolerations:
          - key: execution-stations
            operator: Equal
            value: "true"
            effect: NoSchedule
          nodeSelector:
            execution-stations: "true"
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app.kubernetes.io/component: execution-station
                  topologyKey: kubernetes.io/hostname
  
  service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: execution-station-${USER_ID}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
        app.kubernetes.io/component: service
        user-id: ${USER_ID}
    spec:
      type: ClusterIP
      selector:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
      ports:
      - name: http
        port: 80
        targetPort: http
        protocol: TCP
      - name: ssh
        port: 22
        targetPort: ssh
        protocol: TCP
      - name: metrics
        port: 9090
        targetPort: metrics
        protocol: TCP
  
  ingress.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      name: execution-station-${USER_ID}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
        app.kubernetes.io/component: ingress
        user-id: ${USER_ID}
      annotations:
        nginx.ingress.kubernetes.io/rewrite-target: /
        nginx.ingress.kubernetes.io/ssl-redirect: "true"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/proxy-body-size: "100m"
        nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
        nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
        nginx.ingress.kubernetes.io/auth-signin: https://${HOST}/oauth2/start
        nginx.ingress.kubernetes.io/auth-url: https://${HOST}/oauth2/auth
    spec:
      ingressClassName: nginx
      tls:
      - hosts:
        - ${HOST}
        secretName: execution-station-${USER_ID}-tls
      rules:
      - host: ${HOST}
        http:
          paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: execution-station-${USER_ID}
                port:
                  number: 80
  
  pvc.yaml: |
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: workspace-${USER_ID}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
        app.kubernetes.io/component: storage
        user-id: ${USER_ID}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: ${STORAGE_SIZE}
      storageClassName: ${STORAGE_CLASS}
  
  networkpolicy.yaml: |
    apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: execution-station-${USER_ID}
      namespace: ${NAMESPACE}
      labels:
        app.kubernetes.io/name: execution-station
        app.kubernetes.io/instance: ${USER_ID}
        app.kubernetes.io/component: network-policy
        user-id: ${USER_ID}
    spec:
      podSelector:
        matchLabels:
          app.kubernetes.io/name: execution-station
          app.kubernetes.io/instance: ${USER_ID}
      policyTypes:
      - Ingress
      - Egress
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        ports:
        - protocol: TCP
          port: 8080
      - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
        ports:
        - protocol: TCP
          port: 9090
      egress:
      - to: []
        ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443
      - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      - to:
        - namespaceSelector:
            matchLabels:
              name: vault-system
        ports:
        - protocol: TCP
          port: 8200